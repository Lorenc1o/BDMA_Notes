#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{footmisc}
\usepackage{listings}

\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{1,0.99,0.94}

\lstdefinestyle{mystyle}{
	language=SQL,
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,  
    frame=single,
    tabsize=2
}

\lstset{style=mystyle}
\end_preamble
\use_default_options true
\begin_modules
tcolorbox
customHeadersFooters
theorems-ams-bytype
theorems-sec-bytype
algorithm2e
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue, urlcolor=blue, citecolor=blue, pdfstartview={FitH}, unicode=true"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\boxbgcolor #62a0ea
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 2cm
\headsep 1cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Advanced DB Exam 2020
\end_layout

\begin_layout Section
Temporal and Spatial DB
\end_layout

\begin_layout Standard
1) Give the period during which user with UID 1 was living in the commune
 called Ixelles but did not have any subscription valid for this commune.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-- Case 4
\end_layout

\begin_layout Plain Layout

SELECT UA.StartDate AS StartDate, UA.EndDate AS EndDate
\end_layout

\begin_layout Plain Layout

FROM UserAddress UA, Commune C
\end_layout

\begin_layout Plain Layout

WHERE UA.UID = 1 AND ST_Intersects(UA.Point, C.Geom) AND C.CommuneName = 'Ixelles'
\end_layout

\begin_layout Plain Layout

	AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

		SELECT * 
\end_layout

\begin_layout Plain Layout

		FROM Subscription S, CommuneSubscription CS
\end_layout

\begin_layout Plain Layout

		WHERE S.UID = 1 AND CS.CommuneName = 'Ixelles' AND CS.SID = S.SID
\end_layout

\begin_layout Plain Layout

			AND ((S.StartDate >= UA.StartDate AND S.StartDate < UA.EndDate)
\end_layout

\begin_layout Plain Layout

				OR
\end_layout

\begin_layout Plain Layout

				(S.EndDate > UA.StartDate AND S.EndDate <= UA.EndDate))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

UNION
\end_layout

\begin_layout Plain Layout

-- Case 1
\end_layout

\begin_layout Plain Layout

SELECT UA.StartDate AS StartDate, S.StartDate AS EndDate
\end_layout

\begin_layout Plain Layout

FROM UserAddress UA, Commune C, Subscription S, CommuneSubscription CS
\end_layout

\begin_layout Plain Layout

WHERE UA.UID = 1 AND ST_Intersects(UA.Point, C.Geom) AND C.CommuneName = 'Ixelles'
\end_layout

\begin_layout Plain Layout

	AND S.UID = 1 AND CS.CommuneName = 'Ixelles' AND CS.SID = S.SID
\end_layout

\begin_layout Plain Layout

	AND UA.StartDate < S.StartDate AND S.StartDate < UA.EndDate
\end_layout

\begin_layout Plain Layout

	AND NOT EXISTS (
\end_layout

\begin_layout Plain Layout

		SELECT * 
\end_layout

\begin_layout Plain Layout

		FROM Subscription S2, CommuneSubscription CS2
\end_layout

\begin_layout Plain Layout

		WHERE S2.UID = 1 AND CS.CommuneName = 'Ixelles' AND CS.SIS = S.SID
\end_layout

\begin_layout Plain Layout

			AND UA.StartDate < S2.EndDate AND S2.FromDate < S.EndDate)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

UNION
\end_layout

\begin_layout Plain Layout

-- Case 2
\end_layout

\begin_layout Plain Layout

SELECT S.EndDate AS StartDate, UA.EndDate AS EndDate
\end_layout

\begin_layout Plain Layout

FROM UserAddress UA, Commune C, Subscription S, CommuneSubscription CS
\end_layout

\begin_layout Plain Layout

WHERE UA.UID = 1 AND ST_Intersects(UA.Point, C.Geom) AND C.CommuneName = 'Ixelles'
\end_layout

\begin_layout Plain Layout

	AND S.UID = 1 AND CS.CommuneName = 'Ixelles' AND CS.SID = S.SID
\end_layout

\begin_layout Plain Layout

	AND UA.StartDate < S.EndDate AND S.EndDate < UA.EndDate
\end_layout

\begin_layout Plain Layout

	AND NOT EXISTS (
\end_layout

\begin_layout Plain Layout

		SELECT * 
\end_layout

\begin_layout Plain Layout

		FROM Subscription S2, CommuneSubscription CS2
\end_layout

\begin_layout Plain Layout

		WHERE S2.UID = 1 AND CS.CommuneName = 'Ixelles' AND CS.SID = S.SID
\end_layout

\begin_layout Plain Layout

			AND S.EndDate < S2.EndDate AND S2.FromDate < UA.EndDate)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

UNION
\end_layout

\begin_layout Plain Layout

--Case 3
\end_layout

\begin_layout Plain Layout

SELECT S1.EndDate AS StartDate, S2.StartDate AS EndDate
\end_layout

\begin_layout Plain Layout

FROM UserAddress UA, Commune C, Subscription S1, Subscription S2, Commune
 Subscription CS1, Commune Subscription CS2
\end_layout

\begin_layout Plain Layout

WHERE UA.UID = 1 AND ST_Intersects(UA.Point, C.Geom) AND C.CommuneName = 'Ixelles'
\end_layout

\begin_layout Plain Layout

	AND S1.UID = 1 AND CS1.CommuneName = 'Ixelles' AND CS1.SID = S1.SID
\end_layout

\begin_layout Plain Layout

	AND S2.UID = 1 AND CS2.CommuneName = 'Ixelles' AND CS2.SID = S2.SID
\end_layout

\begin_layout Plain Layout

	AND UA.StartDate < S1.EndDate AND S1.EndDate < UA.EndDate
\end_layout

\begin_layout Plain Layout

	AND UA.StartDate < S2.StartDate AND S2.StartDate < UA.EndDate
\end_layout

\begin_layout Plain Layout

	AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

		SELECT *
\end_layout

\begin_layout Plain Layout

		FROM Subscription S3, CommuneSubscription CS3
\end_layout

\begin_layout Plain Layout

		WHERE S3.UID = 1 AND CS3.CommuneName = 'Ixelles' AND CS3.SID = S.SID
\end_layout

\begin_layout Plain Layout

			AND S1.ToDate < S3.ToDate AND S3.FromDate < S2.FromDate)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
2) Give the history of the communes for which there was the most subscriptions.
 Do not coalesce the results.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE VIEW SubsChanges(Day) AS
\end_layout

\begin_layout Plain Layout

	SELECT DISTINCT StartDate
\end_layout

\begin_layout Plain Layout

	FROM Subscription
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	UNION
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	SELECT DISTINCT EndDate
\end_layout

\begin_layout Plain Layout

	FROM Subscription
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE VIEW SubsPeriods(StartDate, EndDate) AS
\end_layout

\begin_layout Plain Layout

	SELECT C1.Day, C2.Day
\end_layout

\begin_layout Plain Layout

	FROM SubsChanges C1, SubsChanges C2
\end_layout

\begin_layout Plain Layout

	WHERE C1.Day < C2.Day
\end_layout

\begin_layout Plain Layout

		AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

			SELECT * 
\end_layout

\begin_layout Plain Layout

			FROM SubsChanges C3
\end_layout

\begin_layout Plain Layout

			WHERE C1.Day < C3.Day AND C3.Day < C2.Day)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE VIEW TempTotal(CS.CommuneName, TotalSubs, StartDate, EndDate) AS
\end_layout

\begin_layout Plain Layout

	SELECT CS.CommuneName, COUNT(DISTINCT UID), P.StartDate, P.EndDate
\end_layout

\begin_layout Plain Layout

	FROM Subscription S, CommuneSubscription CS, SubsPeriods P
\end_layout

\begin_layout Plain Layout

	WHERE S.SID = CS.SID
\end_layout

\begin_layout Plain Layout

		AND S.StartDate <= P.StartDate AND P.EndDate <= S.EndDate
\end_layout

\begin_layout Plain Layout

	GROUP BY CS.CommuneName, P.StartDate, P.EndDate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE VIEW TempMax(MaxSubs, StartDate, EndDate) AS
\end_layout

\begin_layout Plain Layout

	SELECT MAX(TotalSubs), StartDate, EndDate
\end_layout

\begin_layout Plain Layout

	FROM TempTotal
\end_layout

\begin_layout Plain Layout

	GROUP BY StartDate, EndDate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE VIEW TempResult(CommuneName, MaxSubs, StartDate, EndDate) AS
\end_layout

\begin_layout Plain Layout

	SELECT TT.CommuneName, TM.MaxSubs, StartDate, EndDate
\end_layout

\begin_layout Plain Layout

	FROM TempTotal TT, TempMax TM
\end_layout

\begin_layout Plain Layout

	WHERE TT.TotalSubs = TM.MaxSubs AND TT.StartDate = TM.StartDate AND TT.EndDate
 = TM.EndDate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
3) For each user, provide for each of the commune the coalesced history
 for which the user had an active subscription in this commune.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE VIEW TempJoin(UID, CommuneName, StartDate, EndDate) AS
\end_layout

\begin_layout Plain Layout

	SELECT UA.UID, CS.CommuneName, UA.StartDate, UA.EndDate
\end_layout

\begin_layout Plain Layout

	FROM UserAddress UA, Subscription S, CommuneSubscription CS
\end_layout

\begin_layout Plain Layout

	WHERE S.UID = UA.UID AND S.SID = CS.SID
\end_layout

\begin_layout Plain Layout

	AND S.StartDate < UA.StartDate AND UA.EndDate <= S.EndDate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	UNION ALL
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	SELECT UA.UID, CS.CommuneName, UA.StartDate, S.EndDate
\end_layout

\begin_layout Plain Layout

	FROM UserAddress UA, Subscription S, CommuneSubscription CS
\end_layout

\begin_layout Plain Layout

	WHERE S.UID = UA.UID AND S.SID = CS.SID
\end_layout

\begin_layout Plain Layout

		AND S.StartDate <= UA.StartDate AND UA.StartDate < S.EndDate AND UA.EndDate
 > S.EndDate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	UNION ALL
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	SELECT UA.UID, CS.CommuneName, S.StartDate, UA.EndDate
\end_layout

\begin_layout Plain Layout

	FROM UserAddress UA, Subscription S, CommuneSubscription CS
\end_layout

\begin_layout Plain Layout

	WHERE S.UID = UA.UID AND S.SID = CS.SID
\end_layout

\begin_layout Plain Layout

		AND UA.StartDate <= S.StartDate AND S.StartDate < UA.ToDate AND S.EndDate >
 UA.EndDate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	UNION ALL
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	SELECT UA.UID, CS.CommuneName, S.StartDate, S.EndDate
\end_layout

\begin_layout Plain Layout

	FROM UserAddress UA, Subscription S, CommuneSubscription CS
\end_layout

\begin_layout Plain Layout

	WHERE S.UID = UA.UID AND S.SID = CS.SID
\end_layout

\begin_layout Plain Layout

		AND UA.StartDate < S.StartDate AND S.EndDate <= UA.EndDate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

SELECT DISTINCT F.UID, F.CommuneName, F.StartDate, L.EndDate
\end_layout

\begin_layout Plain Layout

FROM TempJoin F, TempJoin L
\end_layout

\begin_layout Plain Layout

WHERE F.StartDate < L.EndDate AND F.UID = L.UID AND F.CommuneName = L.CommuneName
\end_layout

\begin_layout Plain Layout

	AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

		SELECT *
\end_layout

\begin_layout Plain Layout

		FROM TempJoin T
\end_layout

\begin_layout Plain Layout

		WHERE T.UID = F.UID AND T.CommuneName = F.CommuneName
\end_layout

\begin_layout Plain Layout

			AND F.StartDate < T.StartDate AND T.StartDate < L.EndDate
\end_layout

\begin_layout Plain Layout

			AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

				SELECT * FROM TempJoin as T1
\end_layout

\begin_layout Plain Layout

				WHERE T1.UID = F.UID AND T1.CommuneName = F.CommuneName
\end_layout

\begin_layout Plain Layout

					AND T1.StartDate < F.StartDate AND T.StartDate <= T1.EndDate ))
\end_layout

\begin_layout Plain Layout

	AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

		SELECT *
\end_layout

\begin_layout Plain Layout

		FROM TempJoin T2
\end_layout

\begin_layout Plain Layout

		WHERE T2.UID = F.UID AND T2.CommuneName = F.CommuneName
\end_layout

\begin_layout Plain Layout

			AND (
\end_layout

\begin_layout Plain Layout

				(T2.StartDate < F.StartDate AND F.StartDate <= T2.EndDate)
\end_layout

\begin_layout Plain Layout

				OR
\end_layout

\begin_layout Plain Layout

				(T2.StartDate >= L.EndDate AND L.EndDate < T2.EndDate)
\end_layout

\begin_layout Plain Layout

				))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
4) Give for each region, the number of users which were living in this region
 during the complete [01/01/2000,01/01/2001] period.
 User that moved from one address to another (both addresses in the same
 region) should be counted.
 You should assume that the different addresses of any user form a continuous
 and uninterrupted lifecycle (if a user has a registered address at a time
 instant 
\begin_inset Formula $A$
\end_inset

 and another or the same registered address at a later time instant 
\begin_inset Formula $B$
\end_inset

, then he also has a registered address for each time instant 
\begin_inset Formula $C$
\end_inset

 such that 
\begin_inset Formula $C\in\left[A,B\right]$
\end_inset

).
 Furthermore, a user cannot have two different addresses at the same time.
 We suppose you can compare time points to strings of the form 
\begin_inset Quotes eld
\end_inset

dd/mm/yyyy
\begin_inset Quotes erd
\end_inset

 using standard orginal comparators (>,<,=,...).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE VIEW Temp_User_Region(UID, RegionName, StartDate, EndDate) AS
\end_layout

\begin_layout Plain Layout

	SELECT UA.UID, C.RegionName, UA.StartDate, UA.EndDate
\end_layout

\begin_layout Plain Layout

	FROM UserAddress UA, Commune C
\end_layout

\begin_layout Plain Layout

	WHERE ST_Intersects(UA.Point, C.Geom)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE VIEW Temp_U_R_Coal(UID, RegionName, StartDate, EndDate) AS
\end_layout

\begin_layout Plain Layout

	SELECT DISTINCT F.UID, F.CommuneName, F.StartDate, L.EndDate
\end_layout

\begin_layout Plain Layout

	FROM Temp_User_Region F, Temp_User_Region L
\end_layout

\begin_layout Plain Layout

	WHERE F.StartDate < L.EndDate AND F.UID = L.UID AND F.CommuneName = L.CommuneName
\end_layout

\begin_layout Plain Layout

		AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

			SELECT *
\end_layout

\begin_layout Plain Layout

			FROM Temp_User_Region T
\end_layout

\begin_layout Plain Layout

			WHERE T.UID = F.UID AND T.CommuneName = F.CommuneName
\end_layout

\begin_layout Plain Layout

				AND F.StartDate < T.StartDate AND T.StartDate < L.EndDate
\end_layout

\begin_layout Plain Layout

				AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

					SELECT * FROM Temp_User_Region as T1
\end_layout

\begin_layout Plain Layout

					WHERE T1.UID = F.UID AND T1.CommuneName = F.CommuneName
\end_layout

\begin_layout Plain Layout

						AND T1.StartDate < F.StartDate AND T.StartDate <= T1.EndDate ))
\end_layout

\begin_layout Plain Layout

		AND NOT EXISTS(
\end_layout

\begin_layout Plain Layout

			SELECT *
\end_layout

\begin_layout Plain Layout

			FROM Temp_User_Region T2
\end_layout

\begin_layout Plain Layout

			WHERE T2.UID = F.UID AND T2.CommuneName = F.CommuneName
\end_layout

\begin_layout Plain Layout

				AND (
\end_layout

\begin_layout Plain Layout

					(T2.StartDate < F.StartDate AND F.StartDate <= T2.EndDate)
\end_layout

\begin_layout Plain Layout

					OR
\end_layout

\begin_layout Plain Layout

					(T2.StartDate >= L.EndDate AND L.EndDate < T2.EndDate)
\end_layout

\begin_layout Plain Layout

					))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

SELECT RegionName, COUNT(UID)
\end_layout

\begin_layout Plain Layout

FROM Temp_User_Region
\end_layout

\begin_layout Plain Layout

WHERE StartDate <= '01/01/2000' AND '01/01/2001' <= EndDate
\end_layout

\begin_layout Plain Layout

GROUP BY RegionName
\end_layout

\end_inset


\end_layout

\begin_layout Standard
5) List the different regions with their total area
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT RegionName, SUM(ST_AREA(Geom))
\end_layout

\begin_layout Plain Layout

FROM Commune
\end_layout

\begin_layout Plain Layout

GROUP BY RegionName
\end_layout

\end_inset


\end_layout

\begin_layout Standard
6) For each commune, provide the distance between its centroid and the centroid
 of the capital of the region they are in.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT C.CommuneName, C.RegionName, ST_Distance(ST_Centroid(C.Geom), ST_Centroid(Ca
p.Geom)) AS DistToCapital
\end_layout

\begin_layout Plain Layout

FROM Commune C, Region R, Commune Cap
\end_layout

\begin_layout Plain Layout

WHERE C.RegionName = R.RegionName AND R.Capital = Cap.CommuneName
\end_layout

\end_inset


\end_layout

\begin_layout Standard
7) Give the car trip (CID and StartDate time) which has performed the longest
 segment in the commune of Ixelles.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT CT.CID, CT.StartTime, ST_Length(ST_Intersection(ST.Itinerary, C.Geom)
 AS Length
\end_layout

\begin_layout Plain Layout

FROM CarTrip CT, Commune C
\end_layout

\begin_layout Plain Layout

WHERE C.CommuneName = 'Ixelles' AND ST_Intersects(CT.Itinerary, C.Geom)
\end_layout

\begin_layout Plain Layout

ORDER BY ST_Length(ST_Intersection(ST.Itinerary, C.Geom)
\end_layout

\begin_layout Plain Layout

LIMIT 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
8) List for each trip the altitude of the lowest and highest point of the
 trip.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT CT.CID, (stats).max highest, (stats).min lowest
\end_layout

\begin_layout Plain Layout

FROM (
\end_layout

\begin_layout Plain Layout

	SELECT CT.CID, ST_SummaryStats(ST_Clip(C.altitude, 1, CT.Itinerary, TRUE))
 AS stats
\end_layout

\begin_layout Plain Layout

	FROM Country C JOIN CarTrip CT ON ST_Intersects(CT.Itinerary, C.altitude))
 AS tmp
\end_layout

\end_inset


\end_layout

\begin_layout Section
Active DB
\end_layout

\begin_layout Standard
9) Ensure with a trigger that at any instant a user has a single address
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE TRIGGER PK_User_Addr ON UserAddress FOR INSERT, UPDATE AS
\end_layout

\begin_layout Plain Layout

IF EXISTS(
\end_layout

\begin_layout Plain Layout

	SELECT *
\end_layout

\begin_layout Plain Layout

	FROM UserAddress UA1
\end_layout

\begin_layout Plain Layout

	WHERE 1 < (
\end_layout

\begin_layout Plain Layout

		SELECT * COUNT(UA2.UID)
\end_layout

\begin_layout Plain Layout

		FROM UserAddress UA2
\end_layout

\begin_layout Plain Layout

		WHERE UA1.UID = UA2.UID
\end_layout

\begin_layout Plain Layout

			AND UA1.StartDate < UA2.EndDate AND UA1.EndDate > UA2.StartDate)
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	RAISERROR('A user can only have one address at a time',1,2)
\end_layout

\begin_layout Plain Layout

	ROLLBACK TRANSACTION
\end_layout

\begin_layout Plain Layout

END
\end_layout

\end_inset


\end_layout

\begin_layout Standard
10) Ensure with a trigger that at any instant a user has a single subscription
 to a commune.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-- If a user can only be subscribe to one commune at a time
\end_layout

\begin_layout Plain Layout

CREATE TRIGGER PK_User_Subs ON Subscription FOR INSERT, UPDATE AS
\end_layout

\begin_layout Plain Layout

IF EXISTS(
\end_layout

\begin_layout Plain Layout

	SELECT *
\end_layout

\begin_layout Plain Layout

	FROM Subscription S1
\end_layout

\begin_layout Plain Layout

	WHERE 1 < (
\end_layout

\begin_layout Plain Layout

		SELECT COUNT(S2.UID)
\end_layout

\begin_layout Plain Layout

		FROM Subscription S2
\end_layout

\begin_layout Plain Layout

		WHERE S1.UID = S2.UID
\end_layout

\begin_layout Plain Layout

			AND S1.StartDate < S2.EndDate AND S1.EndDate > S2.StartDate)
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	RAISERROR('A user can only have one subscription at a time',1,2)
\end_layout

\begin_layout Plain Layout

	ROLLBACK TRANSACTION
\end_layout

\begin_layout Plain Layout

END
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

-- If a user can be subscribed to several communes at a time, but only once
 at each
\end_layout

\begin_layout Plain Layout

CREATE TRIGGER PK_User_Subs ON Subscription FOR INSERT, UPDATE AS
\end_layout

\begin_layout Plain Layout

IF EXISTS(
\end_layout

\begin_layout Plain Layout

	SELECT *
\end_layout

\begin_layout Plain Layout

	FROM Subscription S1
\end_layout

\begin_layout Plain Layout

	WHERE 1 < (
\end_layout

\begin_layout Plain Layout

		SELECT COUNT(S2.UID)
\end_layout

\begin_layout Plain Layout

		FROM Subscription S2
\end_layout

\begin_layout Plain Layout

		WHERE S1.UID = S2.UID AND S1.SID = S2.SID
\end_layout

\begin_layout Plain Layout

			AND S1.StartDate < S2.EndDate AND S1.EndDate > S2.StartDate)
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	RAISERROR('A user can only have one subscription at a time',1,2)
\end_layout

\begin_layout Plain Layout

	ROLLBACK TRANSACTION
\end_layout

\begin_layout Plain Layout

END
\end_layout

\end_inset


\end_layout

\begin_layout Standard
11) Ensure with a trigger that the communes in table Commune do not overlap.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE TRIGGER NonOverlap_Comm ON Commune FOR INSERT, UPDATE AS
\end_layout

\begin_layout Plain Layout

IF EXISTS(
\end_layout

\begin_layout Plain Layout

	SELECT *
\end_layout

\begin_layout Plain Layout

	FROM Commune C, Inserted I
\end_layout

\begin_layout Plain Layout

	WHERE C.CommuneName <> I.CommuneName
\end_layout

\begin_layout Plain Layout

		AND ST_Intersects(ST_Interior(C.geom),ST_Interior(I.Geom))
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	RAISERROR('Two communes cannot overlap',1,2)
\end_layout

\begin_layout Plain Layout

	ROLLBACK TRANSACTION
\end_layout

\begin_layout Plain Layout

END
\end_layout

\end_inset


\end_layout

\begin_layout Standard
12) Ensure with a trigger that the geometry of a Country is equal to the
 union of its composing communes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE TRIGGER CountryUnionComm ON Commune FOR INSERT, UPDATE AS
\end_layout

\begin_layout Plain Layout

IF EXISTS(
\end_layout

\begin_layout Plain Layout

	SELECT ST_DIFFERENCE(Com.Geom, C.Geom)
\end_layout

\begin_layout Plain Layout

	FROM Country C 
\end_layout

\begin_layout Plain Layout

		JOIN Region R ON C.CountryName = R.Country 
\end_layout

\begin_layout Plain Layout

		JOIN Commune Com ON Com.RegionName = R.RegionName
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	UNION
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	SELECT ST_DIFFERENCE(C.Geom, ST_UNION(Com.Geom))
\end_layout

\begin_layout Plain Layout

	FROM Country C
\end_layout

\begin_layout Plain Layout

		JOIN Region R ON C.CountryName = R.Country 
\end_layout

\begin_layout Plain Layout

		JOIN Commune Com ON Com.RegionName = R.RegionName
\end_layout

\begin_layout Plain Layout

	GROUP BY C.CountryName)
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	RAISERROR('A country must be equal to the union of its composing communes',1,2)
\end_layout

\begin_layout Plain Layout

	ROLLBACK TRANSACTION
\end_layout

\begin_layout Plain Layout

END
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE TRIGGER CountryUnionComm2 ON Country FOR INSERT, UPDATE AS
\end_layout

\begin_layout Plain Layout

IF EXISTS(
\end_layout

\begin_layout Plain Layout

	SELECT ST_DIFFERENCE(Com.Geom, C.Geom)
\end_layout

\begin_layout Plain Layout

	FROM Country C 
\end_layout

\begin_layout Plain Layout

		JOIN Region R ON C.CountryName = R.Country 
\end_layout

\begin_layout Plain Layout

		JOIN Commune Com ON Com.RegionName = R.RegionName
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	UNION
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	SELECT ST_DIFFERENCE(C.Geom, ST_UNION(Com.Geom))
\end_layout

\begin_layout Plain Layout

	FROM Country C
\end_layout

\begin_layout Plain Layout

		JOIN Region R ON C.CountryName = R.Country 
\end_layout

\begin_layout Plain Layout

		JOIN Commune Com ON Com.RegionName = R.RegionName
\end_layout

\begin_layout Plain Layout

	GROUP BY C.CountryName)
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	RAISERROR('A country must be equal to the union of its composing communes',1,2)
\end_layout

\begin_layout Plain Layout

	ROLLBACK TRANSACTION
\end_layout

\begin_layout Plain Layout

END
\end_layout

\end_inset


\end_layout

\end_body
\end_document
