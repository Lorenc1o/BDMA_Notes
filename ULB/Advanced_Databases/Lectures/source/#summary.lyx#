#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\begin_modules
tcolorbox
customHeadersFooters
theorems-ams-bytype
theorems-sec-bytype
algorithm2e
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue, urlcolor=blue, citecolor=blue, pdfstartview={FitH}, unicode=true"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\boxbgcolor #62a0ea
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 2cm
\headsep 1cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
INFOH415 - Advanced Databases
\end_layout

\begin_layout Date
Fall 2022
\end_layout

\begin_layout Author
Jose Antonio Lorencio Abril
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 1200px-Université_libre_de_Bruxelles_(logo).svg.png
	scale 10

\end_inset


\end_layout

\begin_layout Standard
\align right
Professor: Esteban Zimanyi
\end_layout

\begin_layout Standard
\align right
Student e-mail: jose.lorencio.abril@ulb.be
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Address
This is a summary of the course 
\emph on
Advanced Databases
\emph default
 taught at the Université Libre de Bruxelles by Professor Esteban Zimanyi
 in the academic year 22/23.
 Most of the content of this document is adapted from the course notes by
 Zimanyi, 
\begin_inset CommandInset citation
LatexCommand cite
key "Zimanyi2022"
literal "false"

\end_inset

, so I won't be citing it all the time.
 Other references will be provided when used.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList algorithm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Active Databases
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Traditionally, DBMS are 
\series bold
passive
\series default
, meaning that all actions on data result from explicit invocation in applicatio
n programs.
 In contrast, 
\series bold
active DMBS
\series default
 can perform actions automatically, in response to monitored events, such
 as updates in the database, certain points in time or defined events which
 are external to the database.
\end_layout

\begin_layout Standard

\series bold
Integrity constraints
\series default
 are a well-known mechanism that has been used since the early stages of
 SQL to enhance integrity by imposing constraints to the data.
 These constraints will only allow modifications to the database that do
 not violate them.
 Also, it is common for DBMS to provide mechanisms to store procedures,
 in the form of precompiled packets that can be invoked by the user.
 These are usually caled 
\series bold
stored procedure
\series default
.
\end_layout

\begin_layout Standard
The active database technology make an abstraction of these two features:
 the 
\series bold
triggers
\series default
.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
A 
\series bold
trigger
\series default
 or, more generally, an 
\series bold
ECA rule
\series default
, consists of an event, a condition and a set of actions:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Event
\series default
: indicates when the trigger must be called.
\end_layout

\begin_layout Itemize

\series bold
Condition
\series default
: indicates the checks that must be done after the trigger is called.
 If the condition is fulfilled, then the set of actions is executed.
 Otherwise, the trigger does not perform any action.
\end_layout

\begin_layout Itemize

\series bold
Actions
\series default
: performed when the condition is fullfiled.
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Example
A conceptual trigger could be like the following:
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A customer has not paid 3 invoices at the due date.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If the credit limit of the customer is less than 20000€.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cancel all curernt orders of the customer.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
There are several aspects of the semantics of an applications that can be
 expressed through triggers:
\end_layout

\begin_layout Itemize
Static constraints: refer to referential integrity, cardinality of relations
 or value restrictions.
\end_layout

\begin_layout Itemize
Control, business rules and workflow management rules: refer to restrictions
 imposed by the business requirements.
\end_layout

\begin_layout Itemize
Historical data rules: define how historial data has to be treated.
\end_layout

\begin_layout Itemize
Implementation of generic relationships: with triggers we can define arbitrarily
 complex relationships.
\end_layout

\begin_layout Itemize
Derived data rules: refer to the treatment of materialized attributes, materiali
zed views and replicated data.
\end_layout

\begin_layout Itemize
Access control rules: define which users can access which content and with
 which permissions.
\end_layout

\begin_layout Itemize
Monitoring rules: assess performance and resource usage.
\end_layout

\begin_layout Standard
The benefits of active technology are:
\end_layout

\begin_layout Itemize
Simplification of application programs by embedding part of the functionality
 into the database using triggers.
\end_layout

\begin_layout Itemize
Increased automation by the automatic execution of triggered actions.
\end_layout

\begin_layout Itemize
Higher reliability of data because the checks can be more elaborate and
 the actions to take in each case are precisely defined.
\end_layout

\begin_layout Itemize
Increased flexibility with the possibility of increasing code reuse and
 centralization of the data management.
\end_layout

\begin_layout Section
Representative Systems and Prototypes
\end_layout

\begin_layout Standard
Even though this basic model is simple and intuitive, each vendor proposes
 its own way to implement triggers, which were not in the SQL-92 standard.
 We are going to study Starbust triggers, Oracle triggers and DB2 triggers.
\end_layout

\begin_layout Subsection
Starbust
\end_layout

\begin_layout Standard
Starbust is a Relational DBMS prototype developed by IBM.
 In Starbust, the 
\series bold
triggers
\series default
 are defined with the following definition of their components:
\end_layout

\begin_layout Itemize

\series bold
Event
\series default
: events can refer to data-manipulation operations in SQL, i.e.
 INSERT, DELETE or UPDATE.
\end_layout

\begin_layout Itemize

\series bold
Conditions
\series default
: are boolean predicates in SQL on the current state of the database after
 the event has occurred.
\end_layout

\begin_layout Itemize

\series bold
Actions
\series default
: are SQL statements, rule-manipulation statements or the ROLLBACK operation.
\end_layout

\begin_layout Example

\emph on
'The salary of employees is not larger than the salary of the manager of
 their department.'
\end_layout

\begin_layout Example
The easiest way to maintain this rule is to rollback any action that violates
 it.
 This restriction can be broken (if we focus on modifications on the employees
 only) when a new employee is inserted, when the department of an employee
 is modified or when the salary of an employee is updated.
 Thus, a trigger that solves this could have these actions as events, then
 it can check whether the condition is fullfiled or not.
 If it is not, then the action can be rollback to the previous state, in
 which the condition was fullfiled.
\end_layout

\begin_layout Example
\begin_inset listings
lstparams "language=Python,morekeywords={CREATE, RULE, ON, WHEN, IF, EXISTS, SELECT, FROM, WHERE, AND, THEN, ROLLBACK}"
inline false
status open

\begin_layout Plain Layout

CREATE RULE Mgrsals ON Emp
\end_layout

\begin_layout Plain Layout

WHEN INSERTED, UPDATED(Dept), UPDATED(Salary)
\end_layout

\begin_layout Plain Layout

IF EXISTS (
\end_layout

\begin_layout Plain Layout

	SELECT *
\end_layout

\begin_layout Plain Layout

	FROM Emp E, Dept D, EMP M
\end_layout

\begin_layout Plain Layout

	WHERE E.Dept = D.Dept #Check the correct department
\end_layout

\begin_layout Plain Layout

		  AND E.Sal > M.Sal #Check the salary condition
\end_layout

\begin_layout Plain Layout

		  AND D.Mgr = M.Name #Check the manager is the correct one
\end_layout

\begin_layout Plain Layout

	)
\end_layout

\begin_layout Plain Layout

THEN ROLLBACK;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The syntax of Starbust's rule definition is as described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Starbust's-rule-definition"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 As we can see, rules have an unique name and each rule is associated with
 a single relation.
 The events are defined to be only database updates, but one rule can have
 several events defined on the target relation.
 
\end_layout

\begin_layout Standard
The same event can be used in several triggers, so one event can trigger
 different actions to be executed.
 For this not to produce an unwanted outcome, it is possible to establish
 the order in which different triggers must be executed, by using the PRECEDES
 and FOLLOWS declarations.
 The order defined by this operators is partial (not all triggers are comparable
) and must be acyclic to avoid deadlocks.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Python,morekeywords={CREATE, RULE, ON, WHEN, IF, EXISTS, SELECT, FROM, WHERE, AND, THEN, ROLLBACK}"
inline false
status open

\begin_layout Plain Layout

CREATE RULE <rule-name> ON <relation-name>
\end_layout

\begin_layout Plain Layout

WHEN <list of trigger-events>
\end_layout

\begin_layout Plain Layout

[IF <condition>]
\end_layout

\begin_layout Plain Layout

THEN <list of SQL-statements>
\end_layout

\begin_layout Plain Layout

[PRECEDES <list of rule-names>]
\end_layout

\begin_layout Plain Layout

[FOLLOWS <list of rule-names>];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

where
\end_layout

\begin_layout Plain Layout

	<trigger-event> := INSERTED | DELETED | UPDATED [attributes>]
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Starbust's rule definition syntax.
\begin_inset CommandInset label
LatexCommand label
name "tab:Starbust's-rule-definition"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Example

\emph on
'If the average salary of employees gets over 100, reduce the salary of
 all employees by 10%.'
\end_layout

\begin_layout Example
In this case, the condition can be violated when a new employee is inserted,
 when an employee is deleted or when the salary is updated.
 Now, the action is not to rollback the operation, but to reduce the salary
 of every employee by 10%.
\end_layout

\begin_layout Example
First, let's exemplify the cases in which the condition is violated.
 Imagine the following initial state of the table Emp:
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
John
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mike
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sarah
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
120
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Example
The average salary is 90, so the condition is fullfiled.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
INSERT INTO Emp VALUES('James', 200)
\end_layout

\begin_deeper
\begin_layout Standard
The average salary would be 117,5 and the condition is not fullfiled.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
DELETE FROM Emp WHERE Name='John'
\end_layout

\begin_deeper
\begin_layout Standard
The average salary would be 110 and the condition is not fullfiled.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
UPDATE Emp SET Sal=110 WHERE Name='John'
\end_layout

\begin_deeper
\begin_layout Standard
The average salary would be 110 and the condition is not fullfiled.
\end_layout

\end_deeper
\end_deeper
\begin_layout Example
The trigger could be defined as:
\end_layout

\begin_layout Example
\begin_inset listings
lstparams "language=Python,morekeywords={CREATE, RULE, ON, WHEN, IF, EXISTS, SELECT, FROM, WHERE, AND, THEN, ROLLBACK}"
inline false
status open

\begin_layout Plain Layout

CREATE RULE SalaryControl ON Emp
\end_layout

\begin_layout Plain Layout

WHEN INSERTED, DELETED, UPDATED(Sal)
\end_layout

\begin_layout Plain Layout

IF 
\end_layout

\begin_layout Plain Layout

	(SELECT AVG(Sal) FROM Emp) > 100
\end_layout

\begin_layout Plain Layout

THEN 
\end_layout

\begin_layout Plain Layout

	UPDATE Emp
\end_layout

\begin_layout Plain Layout

	SET Sal = 0.9*Sal;
\end_layout

\end_inset


\end_layout

\begin_layout Example
Note, nonetheless, that for the first example, we would get the following
 result:
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
John
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mike
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
90
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sarah
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
108
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
James
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
180
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Example
Here, the mean is 105.75, still bigger than 100.
 We will see how to solve this issue later.
\end_layout

\begin_layout Subsubsection
Starbust Semantics
\end_layout

\begin_layout Standard
At this point, it is interesting to bring some definitions up to scene:
\end_layout

\begin_layout Standard
\begin_inset Flex Color Box
status open

\begin_layout Definition
A 
\series bold
transaction
\series default
 is a sequence of statements that is to be treated as an atomic unit of
 work for some aspect of the processing, i.e., a transaction either executes
 from beginning to end, or it does not execute at all.
\end_layout

\begin_layout Plain Layout
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
A 
\series bold
statement
\series default
 is a part of a transaction, which expresses an operation on the database.
\end_layout

\begin_layout Plain Layout
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
En 
\series bold
event
\series default
 (in a more precise way than before) is the occurrence of executing a statement,
 i.e., a request for executing an operation on the database.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Thus, rules are triggered by the execution of operations in statements
\end_layout

\begin_layout Section
Applications of Active Rules
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Graph Databases
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Neo4j
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Temporal Databases
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Time Ontology
\end_layout

\begin_layout Section
Temporal Conceptual Modeling
\end_layout

\begin_layout Section
Manipulating Temporal Databases with SQL-92
\end_layout

\begin_layout Section
Temporal Support in SQL 2011
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Spatial Databases
\end_layout

\begin_layout Section
Georeferences and Coordinate Systems
\end_layout

\begin_layout Section
Conceptual Modelling for Spatial Databases
\end_layout

\begin_layout Section
Logical Modelling for Spatial Databases
\end_layout

\begin_layout Section
SQL/MM
\end_layout

\begin_layout Section
Representative Systems
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "advDB_bib"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
